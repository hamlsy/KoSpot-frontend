#!/usr/bin/env node

/**
 * üîÑ Backup Restore Script
 * Import ÏàòÏ†ïÏù¥ÎÇò Ï§ëÎ≥µ Ï†úÍ±∞ ÏûëÏóÖ Ï†ÑÏóê ÏÉùÏÑ±Îêú Î∞±ÏóÖÏùÑ Î≥µÏõêÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

class BackupRestore {
    constructor(backupType = 'imports') {
        this.backupType = backupType;
        this.backupDir = backupType === 'imports' ? '.backup-imports' : '.backup-deduplication';
    }

    /**
     * ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î∞±ÏóÖ Î™©Î°ù Ï°∞Ìöå
     */
    listBackups() {
        if (!fs.existsSync(this.backupDir)) {
            console.log(chalk.yellow('‚ö†Ô∏è  No backup directory found'));
            return [];
        }

        const backups = fs.readdirSync(this.backupDir)
            .filter(file => fs.statSync(path.join(this.backupDir, file)).isFile() || fs.statSync(path.join(this.backupDir, file)).isDirectory())
            .map(file => ({
                name: file,
                path: path.join(this.backupDir, file),
                stats: fs.statSync(path.join(this.backupDir, file))
            }))
            .sort((a, b) => b.stats.mtime - a.stats.mtime);

        return backups;
    }

    /**
     * Î∞±ÏóÖ Î≥µÏõê
     */
    restore(backupName = null) {
        const backups = this.listBackups();
        
        if (backups.length === 0) {
            console.log(chalk.red('‚ùå No backups found'));
            return false;
        }

        // Î∞±ÏóÖ ÏÑ†ÌÉù
        let selectedBackup = backups[0]; // Í∞ÄÏû• ÏµúÍ∑º Î∞±ÏóÖ
        if (backupName) {
            selectedBackup = backups.find(b => b.name === backupName);
            if (!selectedBackup) {
                console.log(chalk.red(`‚ùå Backup '${backupName}' not found`));
                return false;
            }
        }

        console.log(chalk.blue(`üîÑ Restoring backup: ${selectedBackup.name}`));

        try {
            if (this.backupType === 'imports') {
                // Import Î∞±ÏóÖ Î≥µÏõê (Í∞úÎ≥Ñ ÌååÏùº)
                this.restoreImportBackup(selectedBackup.path);
            } else {
                // Ï§ëÎ≥µ Ï†úÍ±∞ Î∞±ÏóÖ Î≥µÏõê (Ï†ÑÏ≤¥ ÎîîÎ†âÌÜ†Î¶¨)
                this.restoreDeduplicationBackup(selectedBackup.path);
            }

            console.log(chalk.green('‚úÖ Backup restored successfully'));
            return true;
            
        } catch (error) {
            console.error(chalk.red('‚ùå Error restoring backup:'), error.message);
            return false;
        }
    }

    /**
     * Import Î∞±ÏóÖ Î≥µÏõê
     */
    restoreImportBackup(backupPath) {
        if (fs.statSync(backupPath).isDirectory()) {
            // ÎîîÎ†âÌÜ†Î¶¨Ïù∏ Í≤ΩÏö∞ Î™®Îì† ÌååÏùº Î≥µÏõê
            const files = fs.readdirSync(backupPath);
            files.forEach(file => {
                const backupFile = path.join(backupPath, file);
                const originalFile = file.replace(/_/g, path.sep);
                
                if (fs.existsSync(originalFile)) {
                    fs.copyFileSync(backupFile, originalFile);
                    console.log(chalk.dim(`  Restored: ${originalFile}`));
                }
            });
        } else {
            // Îã®Ïùº ÌååÏùºÏù∏ Í≤ΩÏö∞
            const originalFile = path.basename(backupPath).replace(/_/g, path.sep);
            if (fs.existsSync(originalFile)) {
                fs.copyFileSync(backupPath, originalFile);
                console.log(chalk.dim(`  Restored: ${originalFile}`));
            }
        }
    }

    /**
     * Ï§ëÎ≥µ Ï†úÍ±∞ Î∞±ÏóÖ Î≥µÏõê
     */
    restoreDeduplicationBackup(backupPath) {
        const srcDir = 'src';
        
        // ÌòÑÏû¨ src ÎîîÎ†âÌÜ†Î¶¨ ÏÇ≠Ï†ú
        if (fs.existsSync(srcDir)) {
            this.removeDir(srcDir);
        }
        
        // Î∞±ÏóÖÏóêÏÑú Î≥µÏõê
        this.copyDir(backupPath, srcDir);
    }

    /**
     * ÎîîÎ†âÌÜ†Î¶¨ Ï†úÍ±∞
     */
    removeDir(dir) {
        if (fs.existsSync(dir)) {
            const files = fs.readdirSync(dir);
            files.forEach(file => {
                const filePath = path.join(dir, file);
                if (fs.statSync(filePath).isDirectory()) {
                    this.removeDir(filePath);
                } else {
                    fs.unlinkSync(filePath);
                }
            });
            fs.rmdirSync(dir);
        }
    }

    /**
     * ÎîîÎ†âÌÜ†Î¶¨ Î≥µÏÇ¨
     */
    copyDir(src, dest) {
        if (!fs.existsSync(dest)) {
            fs.mkdirSync(dest, { recursive: true });
        }
        
        const files = fs.readdirSync(src);
        files.forEach(file => {
            const srcPath = path.join(src, file);
            const destPath = path.join(dest, file);
            
            if (fs.statSync(srcPath).isDirectory()) {
                this.copyDir(srcPath, destPath);
            } else {
                fs.copyFileSync(srcPath, destPath);
            }
        });
    }

    /**
     * Î∞±ÏóÖ Î™©Î°ù Ï∂úÎ†•
     */
    printBackups() {
        const backups = this.listBackups();
        
        if (backups.length === 0) {
            console.log(chalk.yellow('‚ö†Ô∏è  No backups found'));
            return;
        }

        console.log(chalk.bold.blue(`üì¶ Available ${this.backupType} backups:`));
        console.log(chalk.blue('‚îÄ'.repeat(60)));
        
        backups.forEach((backup, index) => {
            const isLatest = index === 0;
            const date = backup.stats.mtime.toLocaleString();
            const size = this.formatSize(this.getSize(backup.path));
            
            console.log(`${isLatest ? chalk.green('‚Üí') : ' '} ${backup.name}`);
            console.log(chalk.dim(`   Created: ${date} | Size: ${size}`));
        });
    }

    /**
     * ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
     */
    getSize(filePath) {
        const stats = fs.statSync(filePath);
        if (stats.isFile()) {
            return stats.size;
        } else {
            let totalSize = 0;
            const files = fs.readdirSync(filePath);
            files.forEach(file => {
                totalSize += this.getSize(path.join(filePath, file));
            });
            return totalSize;
        }
    }

    /**
     * ÌÅ¨Í∏∞ Ìè¨Îß∑ÌåÖ
     */
    formatSize(bytes) {
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        if (bytes === 0) return '0 Bytes';
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }
}

// CLI Ïã§Ìñâ
if (require.main === module) {
    const args = process.argv.slice(2);
    const command = args[0];
    const backupType = args.includes('--deduplication') ? 'deduplication' : 'imports';
    
    const restore = new BackupRestore(backupType);
    
    switch (command) {
        case 'list':
            restore.printBackups();
            break;
        case 'restore': {
            const backupName = args[1];
            restore.restore(backupName);
            break;
        }
        default:
            console.log(chalk.bold.blue('üîÑ Backup Restore Tool\n'));
            console.log('Usage:');
            console.log('  node scripts/restore-imports.js list [--deduplication]');
            console.log('  node scripts/restore-imports.js restore [backup-name] [--deduplication]');
            console.log('\nExamples:');
            console.log('  node scripts/restore-imports.js list');
            console.log('  node scripts/restore-imports.js restore');
            console.log('  node scripts/restore-imports.js restore src-2023-12-30T10-00-00-000Z --deduplication');
            break;
    }
}

module.exports = BackupRestore; 